<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kingthy.mapper.MomentsMapper" >
  <cache></cache>
  <resultMap id="BaseResultMap" type="com.kingthy.entity.Moments" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="modifier" property="modifier" jdbcType="VARCHAR" />
    <result column="uuid" property="uuid" jdbcType="CHAR" />
    <result column="del_flag" property="delFlag" jdbcType="BIT" />
    <result column="context" property="context" jdbcType="VARCHAR" />
    <result column="member_uuid" property="memberUuid" jdbcType="CHAR" />
    <result column="comment_amount" property="commentAmount" jdbcType="BIGINT" />
    <result column="like_amount" property="likeAmount" jdbcType="BIGINT" />
    <result column="member_nick" property="memberNick" jdbcType="VARCHAR" />
    <result column="member_head" property="memberHead" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="video" property="video" jdbcType="VARCHAR" />
    <result column="thumbnail" property="thumbnail" jdbcType="VARCHAR" />
    <result column="image" property="image" jdbcType="LONGVARCHAR" />
  </resultMap>

  <resultMap id="MomentDtoMap" type="com.kingthy.dto.MomentDto" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="modifier" property="modifier" jdbcType="VARCHAR" />
    <result column="uuid" property="uuid" jdbcType="CHAR" />
    <result column="del_flag" property="delFlag" jdbcType="BIT" />
    <result column="image" property="image" jdbcType="VARCHAR" />
    <result column="context" property="context" jdbcType="VARCHAR" />
    <result column="member_uuid" property="memberUuid" jdbcType="CHAR" />
    <result column="comment_amount" property="commentAmount" jdbcType="BIGINT" />
    <result column="like_amount" property="likeAmount" jdbcType="BIGINT" />
    <result column="member_nick" property="memberNick" jdbcType="VARCHAR" />
    <result column="member_head" property="memberHead" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="video" property="video" jdbcType="VARCHAR" />
    <result column="islike" property="isLike" jdbcType="VARCHAR" />
    <result column="isattention" property="isAttention" jdbcType="VARCHAR" />
    <result column="isdel" property="isDel" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="momentSql">
    m.create_date ,m.modify_date ,m.version ,m.creator ,m.modifier ,m.uuid ,m.del_flag ,m.image ,m.context ,m.member_uuid ,
    m.comment_amount ,m.like_amount ,m.member_nick ,m.member_head ,m.type,m.video, CASE WHEN l.uuid is null THEN false ELSE true END as islike
  </sql>

  <update id="updateLikes" >
    update moments SET
    like_amount = like_amount+#{likes},
    comment_amount = comment_amount+#{comments}
    where uuid = #{uuid}
  </update>


  <select id="selectMoment" resultMap="MomentDtoMap">
    SELECT
    <include refid="momentSql"/>
    ,
    CASE
    WHEN m.member_uuid = #{queryMomentPageReq.memberUuid} THEN
    true
    ELSE
    false
    END AS isdel
    FROM
    moments m
    LEFT JOIN likes l on  m.uuid = l.moment_uuid
    and l.member_uuid = #{queryMomentPageReq.memberUuid}
    where m.del_flag=false
    <if test=" queryMomentPageReq.members !=null  ">
      and m.member_uuid in
      <foreach item = "item" index = "index" collection="queryMomentPageReq.members" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test=" queryMomentPageReq.order !=null and queryMomentPageReq.order !='' ">
      ORDER BY ${queryMomentPageReq.order}
    </if>
  </select>

  <select id="selectMoment_COUNT" resultType="Long">
    SELECT
      COUNT(DISTINCT m.uuid)
    FROM
    moments m
    LEFT JOIN likes l on  m.uuid = l.moment_uuid
    and l.member_uuid = #{queryMomentPageReq.memberUuid}
    where m.del_flag=false
    <if test=" queryMomentPageReq.members !=null  ">
      and m.member_uuid in
      <foreach item = "item" index = "index" collection="queryMomentPageReq.members" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test=" queryMomentPageReq.order !=null and queryMomentPageReq.order !='' ">
      ORDER BY m.${queryMomentPageReq.order}
    </if>
  </select>

</mapper>